plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'

	// querydsl 세팅
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'com.server'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.security:spring-security-oauth2-jose'

	// querydsl 세팅
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// 이메일
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	
}

tasks.named('test') {
	useJUnitPlatform()
}
def generated = 'build/generated/querydsl' // QueryDSL 생성 경로 수정

clean {
	delete file(generated) // 빌드 시 생성된 파일을 삭제
}

querydsl {
	jpa = true // JPA 사용 설정
	querydslSourcesDir = generated // 생성 경로 설정
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', generated] // 소스 디렉토리에 QueryDSL 생성 경로 추가
		}
	}
}

tasks.compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
	dependsOn clean // QueryDSL을 컴파일하기 전에 clean을 실행
}

configurations {
	querydsl.extendsFrom compileClasspath
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
